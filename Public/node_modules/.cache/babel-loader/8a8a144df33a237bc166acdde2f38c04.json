{"ast":null,"code":"import _regeneratorRuntime from \"/Users/computer/homework/React-API/fullstack-react/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/computer/homework/React-API/fullstack-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/computer/homework/React-API/fullstack-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/computer/homework/React-API/fullstack-react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/computer/homework/React-API/fullstack-react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/computer/homework/React-API/fullstack-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/computer/homework/React-API/fullstack-react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/computer/homework/React-API/fullstack-react/src/WeatherContainer/Weather.js\";\nimport React, { Component } from \"react\";\nimport LocalList from \"./LocalList\";\nimport WeatherForm from \"./WeatherForm\"; //const API_KEY = \"7e65a726f9556ca15ad913517079de8e\";\n\nvar API_KEY2 = \"ce43c0fc2b233e6004791355f0686c19\";\n\nvar WeatherContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WeatherContainer, _Component);\n\n  function WeatherContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, WeatherContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WeatherContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      dailyForcast: undefined,\n      hourlyForcast: undefined,\n      temperature: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      city: undefined,\n      country: undefined,\n      coord: undefined,\n      humidity: undefined,\n      description: undefined,\n      windSpeed: undefined,\n      time: undefined,\n      error: undefined\n    };\n\n    _this.getWeather =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var lat, lng, api_call, data, a, months, year, month, date, hour, min, sec, formattedTime;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                lat = e.target.elements.lat.value;\n                lng = e.target.elements.lng.value; //lat: 39.742,\n                //lng: -104.9915\n                //const api_call = await fetch(`https://api.openweathermap.org/data/2.5/forecast/?q=${city},${country}&cnt=5&appid=${API_KEY}&units=imperial`);\n\n                _context.next = 5;\n                return fetch(\"https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/\".concat(API_KEY2, \"/\").concat(lat, \",\").concat(lng));\n\n              case 5:\n                api_call = _context.sent;\n                _context.next = 8;\n                return api_call.json();\n\n              case 8:\n                data = _context.sent;\n                //converts UNIX time into military time\n                a = new Date(data.currently.time * 1000);\n                months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n                year = a.getFullYear();\n                month = months[a.getMonth()];\n                date = a.getDate();\n                hour = a.getHours();\n                min = a.getMinutes();\n                sec = a.getSeconds();\n                formattedTime = month + ' ' + date + ' ' + year + ' ' + hour + ':' + min + ':' + sec;\n\n                if (lat && lng) {\n                  console.log(data);\n\n                  _this.setState({\n                    time: formattedTime,\n                    dailyForcast: data.daily.data,\n                    hourlyForcast: data.hourly.data,\n                    //icon: data.weather.icon,\n                    error: \"\"\n                  });\n                } else {\n                  _this.setState({\n                    time: undefined,\n                    dailyForcast: undefined,\n                    hourlyForcast: undefined,\n                    error: \"please choose a city and country\"\n                  });\n                }\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(WeatherContainer, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(WeatherForm, {\n        getWeather: this.getWeather,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), React.createElement(LocalList, {\n        time: this.state.time,\n        dailyForcast: this.state.dailyForcast,\n        hourlyForcast: this.state.hourlyForcast,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return WeatherContainer;\n}(Component);\n\nexport default WeatherContainer;","map":{"version":3,"sources":["/Users/computer/homework/React-API/fullstack-react/src/WeatherContainer/Weather.js"],"names":["React","Component","LocalList","WeatherForm","API_KEY2","WeatherContainer","state","dailyForcast","undefined","hourlyForcast","temperature","tempMax","tempMin","city","country","coord","humidity","description","windSpeed","time","error","getWeather","e","preventDefault","lat","target","elements","value","lng","fetch","api_call","json","data","a","Date","currently","months","year","getFullYear","month","getMonth","date","getDate","hour","getHours","min","getMinutes","sec","getSeconds","formattedTime","console","log","setState","daily","hourly"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport LocalList from \"./LocalList\";\nimport WeatherForm from \"./WeatherForm\";\n\n\n//const API_KEY = \"7e65a726f9556ca15ad913517079de8e\";\nconst API_KEY2 = \"ce43c0fc2b233e6004791355f0686c19\";\n\nclass WeatherContainer extends Component {\n    state = {\n        dailyForcast: undefined,\n        hourlyForcast: undefined,\n        temperature: undefined,\n        tempMax: undefined,\n        tempMin: undefined,\n        city: undefined,\n        country: undefined,\n        coord: undefined,\n        humidity: undefined,\n        description: undefined,\n        windSpeed: undefined,\n        time: undefined,\n        error: undefined\n    }\n\n\n\n    getWeather = async (e) => {\n        e.preventDefault();\n        const lat = e.target.elements.lat.value;\n        const lng = e.target.elements.lng.value;\n\n\n        //lat: 39.742,\n        //lng: -104.9915\n\n        //const api_call = await fetch(`https://api.openweathermap.org/data/2.5/forecast/?q=${city},${country}&cnt=5&appid=${API_KEY}&units=imperial`);\n        const api_call = await fetch(`https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/${API_KEY2}/${lat},${lng}`);\n        const data = await api_call.json();\n\n        //converts UNIX time into military time\n        let a = new Date(data.currently.time * 1000);\n        let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        let year = a.getFullYear();\n        let month = months[a.getMonth()];\n        let date = a.getDate();\n        let hour = a.getHours();\n        let min = a.getMinutes();\n        let sec = a.getSeconds();\n        let formattedTime = month + ' ' + date + ' ' + year + ' ' + hour + ':' + min + ':' + sec;\n\n        if (lat && lng) {\n            console.log(data);\n\n            this.setState({\n                time: formattedTime,\n                dailyForcast: data.daily.data,\n                hourlyForcast: data.hourly.data,\n\n\n                //icon: data.weather.icon,\n                error: \"\"\n            })\n        } else {\n            this.setState({\n                time: undefined,\n                dailyForcast: undefined,\n                hourlyForcast: undefined,\n                error: \"please choose a city and country\"\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <WeatherForm getWeather={this.getWeather} />\n                <LocalList\n                    time={this.state.time}\n                    dailyForcast={this.state.dailyForcast}\n                    hourlyForcast={this.state.hourlyForcast}\n                />\n            </div>\n        );\n    }\n}\n\nexport default WeatherContainer;\n"]},"metadata":{},"sourceType":"module"}