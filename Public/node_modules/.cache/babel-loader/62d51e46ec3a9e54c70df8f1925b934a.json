{"ast":null,"code":"import _regeneratorRuntime from \"/Users/computer/homework/React-API/fullstack-react/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/computer/homework/React-API/fullstack-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/computer/homework/React-API/fullstack-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/computer/homework/React-API/fullstack-react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/computer/homework/React-API/fullstack-react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/computer/homework/React-API/fullstack-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/computer/homework/React-API/fullstack-react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/computer/homework/React-API/fullstack-react/src/WeatherContainer/Weather.js\";\nimport React, { Component } from \"react\";\nimport LocalList from \"./LocalList\";\nimport WeatherForm from \"./WeatherForm\";\nimport ForcastList from \"./ForcastList\"; //const API_KEY = \"7e65a726f9556ca15ad913517079de8e\";\n\nvar API_KEY2 = \"ce43c0fc2b233e6004791355f0686c19\";\n\nvar WeatherContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WeatherContainer, _Component);\n\n  function WeatherContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, WeatherContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WeatherContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      forcast: undefined,\n      temperature: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      city: undefined,\n      country: undefined,\n      coord: undefined,\n      humidity: undefined,\n      description: undefined,\n      windSpeed: undefined,\n      error: undefined\n    };\n\n    _this.getWeather =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var lat, lng, api_call, data, date, hours, minutes, seconds, formattedTime;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                lat = e.target.elements.lat.value;\n                lng = e.target.elements.lng.value; //lat: 39.742,\n                //lng: -104.9915\n                //const api_call = await fetch(`https://api.openweathermap.org/data/2.5/forecast/?q=${city},${country}&cnt=5&appid=${API_KEY}&units=imperial`);\n\n                _context.next = 5;\n                return fetch(\"https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/\".concat(API_KEY2, \"/\").concat(lat, \",\").concat(lng));\n\n              case 5:\n                api_call = _context.sent;\n                _context.next = 8;\n                return api_call.json();\n\n              case 8:\n                data = _context.sent;\n                date = new Date(unix_timeStamp * 1000);\n                hours = date.getHours();\n                minutes = \"0\" + date.getMinutes();\n                seconds = \"0\" + date.getSeconds();\n                formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n\n                if (lat && lng) {\n                  console.log(data);\n                  console.log(data.currently.time); //console.log(data.list[0].main.temp_min);\n                  //     this.setState({\n                  //         forcast: data.list,\n                  //         temperature: data.list[0].main.temp,\n                  //         tempMax: data.list[0].main.temp_max,\n                  //         tempMin: data.list[0].main.temp_min,\n                  //         city: data.city.name,\n                  //         country: data.city.country,\n                  //         coord: data.city.coord,\n                  //         humidity: data.list[0].main.humidity,\n                  //         description: data.list[0].weather[0].description,\n                  //         windSpeed: data.list[0].wind.speed,\n                  //         //icon: data.weather.icon,\n                  //         error: \"\"\n                  //     })\n                  // } else {\n                  //     this.setState({\n                  //         temperature: undefined,\n                  //         tempMax: undefined,\n                  //         tempMin: undefined,\n                  //         city: undefined,\n                  //         country: undefined,\n                  //         coord: undefined,\n                  //         humidity: undefined,\n                  //         description: undefined,\n                  //         windSpeed: undefined,\n                  //         error: \"please choose a city and country\"\n                  //     })\n                }\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(WeatherContainer, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(WeatherForm, {\n        getWeather: this.getWeather,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(LocalList, {\n        temperature: this.state.temperature,\n        city: this.state.city,\n        country: this.state.country,\n        humidity: this.state.humidity,\n        description: this.state.description,\n        error: this.state.error,\n        windSpeed: this.state.windSpeed,\n        icon: this.state.icon,\n        forcast: this.state.forcast,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return WeatherContainer;\n}(Component);\n\nexport default WeatherContainer;","map":{"version":3,"sources":["/Users/computer/homework/React-API/fullstack-react/src/WeatherContainer/Weather.js"],"names":["React","Component","LocalList","WeatherForm","ForcastList","API_KEY2","WeatherContainer","state","forcast","undefined","temperature","tempMax","tempMin","city","country","coord","humidity","description","windSpeed","error","getWeather","e","preventDefault","lat","target","elements","value","lng","fetch","api_call","json","data","date","Date","unix_timeStamp","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","substr","console","log","currently","time","icon"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport LocalList from \"./LocalList\";\nimport WeatherForm from \"./WeatherForm\";\nimport ForcastList from \"./ForcastList\";\n\n//const API_KEY = \"7e65a726f9556ca15ad913517079de8e\";\nconst API_KEY2 = \"ce43c0fc2b233e6004791355f0686c19\";\n\nclass WeatherContainer extends Component {\n    state = {\n        forcast: undefined,\n        temperature: undefined,\n        tempMax: undefined,\n        tempMin: undefined,\n        city: undefined,\n        country: undefined,\n        coord: undefined,\n        humidity: undefined,\n        description: undefined,\n        windSpeed: undefined,\n        error: undefined\n    }\n\n\n\n    getWeather = async (e) => {\n        e.preventDefault();\n        const lat = e.target.elements.lat.value;\n        const lng = e.target.elements.lng.value;\n\n\n        //lat: 39.742,\n        //lng: -104.9915\n\n        //const api_call = await fetch(`https://api.openweathermap.org/data/2.5/forecast/?q=${city},${country}&cnt=5&appid=${API_KEY}&units=imperial`);\n        const api_call = await fetch(`https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/${API_KEY2}/${lat},${lng}`);\n        const data = await api_call.json();\n\n        let date = new Date(unix_timeStamp * 1000);\n        let hours = date.getHours();\n        let minutes = \"0\" + date.getMinutes();\n        let seconds = \"0\" + date.getSeconds();\n        let formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n\n        if (lat && lng) {\n            console.log(data);\n            console.log(data.currently.time)\n            //console.log(data.list[0].main.temp_min);\n            //     this.setState({\n            //         forcast: data.list,\n            //         temperature: data.list[0].main.temp,\n            //         tempMax: data.list[0].main.temp_max,\n            //         tempMin: data.list[0].main.temp_min,\n            //         city: data.city.name,\n            //         country: data.city.country,\n            //         coord: data.city.coord,\n            //         humidity: data.list[0].main.humidity,\n            //         description: data.list[0].weather[0].description,\n            //         windSpeed: data.list[0].wind.speed,\n\n            //         //icon: data.weather.icon,\n            //         error: \"\"\n            //     })\n            // } else {\n            //     this.setState({\n            //         temperature: undefined,\n            //         tempMax: undefined,\n            //         tempMin: undefined,\n            //         city: undefined,\n            //         country: undefined,\n            //         coord: undefined,\n            //         humidity: undefined,\n            //         description: undefined,\n            //         windSpeed: undefined,\n            //         error: \"please choose a city and country\"\n            //     })\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <WeatherForm getWeather={this.getWeather} />\n                <LocalList\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                    windSpeed={this.state.windSpeed}\n                    icon={this.state.icon}\n                    forcast={this.state.forcast}\n                />\n            </div>\n        );\n    }\n}\n\nexport default WeatherContainer;\n"]},"metadata":{},"sourceType":"module"}