{"ast":null,"code":"var _jsxFileName = \"/Users/computer/homework/React-API/fullstack-react/src/WeatherContainer/HourlyForcast.js\";\nimport React from 'react';\nimport './Weather.css';\n\nvar HourlyForcast = function HourlyForcast(_ref) {\n  var HourlyForcast = _ref.HourlyForcast;\n  var hourlyForcast = HourlyForcast.map(function (hour, i) {\n    //converts UNIX time into military time\n    var a = new Date(hour.time * 1000);\n    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    var month = months[a.getMonth()];\n    var date = a.getDate();\n    var forcastHour = a.getHours();\n\n    if (forcastHour === 12) {\n      var convertedHour = '12PM';\n    } else if (forcastHour === 13) {\n      var convertedHour = '1PM';\n    } else if (forcastHour === 14) {\n      var convertedHour = '2PM';\n    } else if (forcastHour === 15) {\n      var convertedHour = '3PM';\n    } else if (forcastHour === 16) {\n      var convertedHour = '4PM';\n    } else if (forcastHour === 17) {\n      var convertedHour = '5PM';\n    } else if (forcastHour === 18) {\n      var convertedHour = '6PM';\n    } else if (forcastHour === 19) {\n      var convertedHour = '7PM';\n    } else if (forcastHour === 20) {\n      var convertedHour = '8PM';\n    } else if (forcastHour === 21) {\n      var convertedHour = '9PM';\n    } else if (forcastHour === 22) {\n      var convertedHour = '10PM';\n    } else if (forcastHour === 23) {\n      var convertedHour = '11PM';\n    } else if (forcastHour === 0) {\n      var convertedHour = '12AM';\n    } else {\n      var convertedHour = forcastHour + 'AM';\n    }\n\n    var formattedTime = month + ' ' + date + ' ' + convertedHour;\n    console.log(hour);\n    return React.createElement(\"div\", {\n      key: i,\n      className: \"hour\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, formattedTime), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Feels Like\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, hour.apparentTemperature, \"\\xB0\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Forcasted\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, hour.temperature), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Wind Speed\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, hour.windSpeed), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Gust \", hour.windGust), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Direction\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, hour.windBearing));\n  });\n  return React.createElement(\"div\", {\n    className: \"hourlyForcast\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, hourlyForcast);\n};\n\nexport default HourlyForcast;","map":{"version":3,"sources":["/Users/computer/homework/React-API/fullstack-react/src/WeatherContainer/HourlyForcast.js"],"names":["React","HourlyForcast","hourlyForcast","map","hour","i","a","Date","time","months","month","getMonth","date","getDate","forcastHour","getHours","convertedHour","formattedTime","console","log","apparentTemperature","temperature","windSpeed","windGust","windBearing"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './Weather.css'\n\nconst HourlyForcast = ({ HourlyForcast }) => {\n    let hourlyForcast = HourlyForcast.map((hour, i) => {\n\n        //converts UNIX time into military time\n        let a = new Date(hour.time * 1000);\n        let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        let month = months[a.getMonth()];\n        let date = a.getDate();\n        let forcastHour = a.getHours();\n\n        if (forcastHour === 12) {\n            var convertedHour = '12PM'\n        } else if (forcastHour === 13) {\n            var convertedHour = '1PM'\n        } else if (forcastHour === 14) {\n            var convertedHour = '2PM'\n        } else if (forcastHour === 15) {\n            var convertedHour = '3PM'\n        } else if (forcastHour === 16) {\n            var convertedHour = '4PM'\n        } else if (forcastHour === 17) {\n            var convertedHour = '5PM'\n        } else if (forcastHour === 18) {\n            var convertedHour = '6PM'\n        } else if (forcastHour === 19) {\n            var convertedHour = '7PM'\n        } else if (forcastHour === 20) {\n            var convertedHour = '8PM'\n        } else if (forcastHour === 21) {\n            var convertedHour = '9PM'\n        } else if (forcastHour === 22) {\n            var convertedHour = '10PM'\n        } else if (forcastHour === 23) {\n            var convertedHour = '11PM'\n        } else if (forcastHour === 0) {\n            var convertedHour = '12AM'\n        } else {\n            var convertedHour = forcastHour + 'AM'\n        }\n\n\n        let formattedTime = month + ' ' + date + ' ' + convertedHour;\n\n\n        console.log(hour)\n        return (\n            <div key={i} className='hour'>\n                <h3>{formattedTime}</h3>\n                <h3>Feels Like</h3>\n                <h1>{hour.apparentTemperature}Â°</h1>\n                <h4>Forcasted</h4>\n                <h2>{hour.temperature}</h2>\n                <h5>Wind Speed</h5>\n                <h3>{hour.windSpeed}</h3>\n                <h3>Gust {hour.windGust}</h3>\n                <h4>Direction</h4>\n                <h2>{hour.windBearing}</h2>\n            </div>\n        )\n    })\n    return (\n        <div className='hourlyForcast'>\n            {hourlyForcast}\n        </div>\n    )\n\n}\nexport default HourlyForcast\n"]},"metadata":{},"sourceType":"module"}